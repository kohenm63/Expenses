{"ast":null,"code":"import _slicedToArray from\"/Users/milarabuchin/Library/Mobile Documents/com~apple~CloudDocs/web/webProjects/april2020/bills/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";//rfc>>>\nimport React,{useContext,useState}from'react';import{BillContext}from'../../Context/BillContext';import style from'../AddBill/style.css';var AddBill=function AddBill(){var _useState=useState(''),_useState2=_slicedToArray(_useState,2),newBillTitle=_useState2[0],setNewBillTitle=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),newBillCost=_useState4[0],setNewBillCost=_useState4[1];//-->  datata type doesnt matter --/\nvar _useContext=useContext(BillContext),updateBills=_useContext.updateBills;//--> validation enf(snippet)>>> --/\nvar formValid=function formValid(){var costValid=newBillCost&&Number.parseFloat(newBillCost);//-->parseFloat- Converts a string to a floating-point number. --/\nvar titleValid=newBillTitle&&newBillTitle.split('').find(function(char){return char!=='';});//-->return an array where a  char is not an empty string--/\nreturn titleValid&&costValid;};//--> clear the form after sumbittion --/\nvar clearFormData=function clearFormData(){setNewBillCost('');setNewBillTitle('');};return/*#__PURE__*/React.createElement(\"div\",{className:\"add-bill-container \"},/*#__PURE__*/React.createElement(\"input\",{className:\"add-bill-form-control form-control \",type:\"text\",placeholder:\"Enter Title\",value:newBillTitle,onChange:function onChange(event){return setNewBillTitle(event.target.value);}}),/*#__PURE__*/React.createElement(\"input\",{className:\"add-bill-form-control form-control\",type:\"number\",placeholder:\"Monthly Cost\",value:newBillCost,onChange:function onChange(event){return setNewBillCost(event.target.value);}}),/*#__PURE__*/React.createElement(\"button\",{className:\"add-bill-form-control btn \",onClick:function onClick(){if(formValid){updateBills({title:newBillTitle,monthlyCost:newBillCost,enabled:true});clearFormData();}}},\"Add Bill\"));};export default AddBill;","map":{"version":3,"sources":["/Users/milarabuchin/Library/Mobile Documents/com~apple~CloudDocs/web/webProjects/april2020/bills/my-app/src/Components/AddBill/AddBill.js"],"names":["React","useContext","useState","BillContext","style","AddBill","newBillTitle","setNewBillTitle","newBillCost","setNewBillCost","updateBills","formValid","costValid","Number","parseFloat","titleValid","split","find","char","clearFormData","event","target","value","title","monthlyCost","enabled"],"mappings":"8NAAA;AACA,MAAOA,CAAAA,KAAP,EAAcC,UAAd,CAAyBC,QAAzB,KAAwC,OAAxC,CACA,OAASC,WAAT,KAA4B,2BAA5B,CACA,MAAOC,CAAAA,KAAP,KAAkB,sBAAlB,CAIA,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,EAAM,eACoBH,QAAQ,CAAC,EAAD,CAD5B,wCACZI,YADY,eACEC,eADF,8BAEkBL,QAAQ,CAAC,EAAD,CAF1B,yCAEZM,WAFY,eAECC,cAFD,eAEiC;AAFjC,gBAIAR,UAAU,CAACE,WAAD,CAJV,CAIfO,WAJe,aAIfA,WAJe,CAMtB;AAEA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,EAAM,CACxB,GAAMC,CAAAA,SAAS,CAAGJ,WAAW,EAAIK,MAAM,CAACC,UAAP,CAAkBN,WAAlB,CAAjC,CAAiE;AACjE,GAAMO,CAAAA,UAAU,CAAGT,YAAY,EAAIA,YAAY,CAACU,KAAb,CAAmB,EAAnB,EAAuBC,IAAvB,CAA4B,SAAAC,IAAI,QAAIA,CAAAA,IAAI,GAAG,EAAX,EAAhC,CAAnC,CAAmF;AAEnF,MAAOH,CAAAA,UAAU,EAAIH,SAArB,CACC,CALD,CAOA;AACC,GAAMO,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,EAAM,CACzBV,cAAc,CAAC,EAAD,CAAd,CACAF,eAAe,CAAC,EAAD,CAAf,CACH,CAHA,CAKA,mBACO,2BAAK,SAAS,CAAC,qBAAf,eACI,6BAAO,SAAS,CAAC,qCAAjB,CACC,IAAI,CAAC,MADN,CAEC,WAAW,CAAC,aAFb,CAGC,KAAK,CAAED,YAHR,CAIC,QAAQ,CAAK,kBAACc,KAAD,QAAWb,CAAAA,eAAe,CAACa,KAAK,CAACC,MAAN,CAAaC,KAAd,CAA1B,EAJd,EADJ,cAOO,6BAAO,SAAS,CAAC,oCAAjB,CACF,IAAI,CAAC,QADH,CAEF,WAAW,CAAC,cAFV,CAGF,KAAK,CAAEd,WAHL,CAIF,QAAQ,CAAK,kBAACY,KAAD,QAAWX,CAAAA,cAAc,CAACW,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAzB,EAJX,EAPP,cAaK,8BAAQ,SAAS,CAAC,4BAAlB,CACA,OAAO,CAAG,kBAAK,CACZ,GAAGX,SAAH,CAAc,CACbD,WAAW,CAAC,CACRa,KAAK,CAACjB,YADE,CAERkB,WAAW,CAAChB,WAFJ,CAGRiB,OAAO,CAAC,IAHA,CAAD,CAAX,CAKAN,aAAa,GAChB,CAEA,CAXD,aAbL,CADP,CA6BA,CAlDD,CAoDA,cAAed,CAAAA,OAAf","sourcesContent":["//rfc>>>\nimport React,{useContext,useState} from 'react';\nimport { BillContext } from '../../Context/BillContext';\nimport style from '../AddBill/style.css'\n\n\n\nconst AddBill = () => {\n    const[newBillTitle, setNewBillTitle]= useState('');\n    const[newBillCost, setNewBillCost]= useState('');  //-->  datata type doesnt matter --/\n\nconst {updateBills} = useContext(BillContext)\n\n//--> validation enf(snippet)>>> --/\n\nconst formValid = () => {\nconst costValid = newBillCost && Number.parseFloat(newBillCost); //-->parseFloat- Converts a string to a floating-point number. --/\nconst titleValid = newBillTitle && newBillTitle.split('').find(char => char!==''); //-->return an array where a  char is not an empty string--/\n\nreturn titleValid && costValid;\n}\n\n//--> clear the form after sumbittion --/\n const clearFormData = () => {\n    setNewBillCost('');\n    setNewBillTitle('');\n}\n\n return (\n        <div className=\"add-bill-container \">\n            <input className=\"add-bill-form-control form-control \"\n             type=\"text\" \n             placeholder=\"Enter Title\" \n             value={newBillTitle}\n             onChange =  {(event) => setNewBillTitle(event.target.value)}\n             ></input>\n               <input className=\"add-bill-form-control form-control\"\n             type=\"number\" \n             placeholder=\"Monthly Cost\" \n             value={newBillCost}\n             onChange =  {(event) => setNewBillCost(event.target.value)}\n             ></input>\n             <button className=\"add-bill-form-control btn \"\n             onClick ={() =>{\n                if(formValid) {\n                 updateBills({\n                     title:newBillTitle,\n                     monthlyCost:newBillCost,\n                     enabled:true\n                 })\n                 clearFormData();\n             }\n\n             } }>Add Bill</button>\n\n        </div>\n    );\n}\n\nexport default AddBill;\n"]},"metadata":{},"sourceType":"module"}