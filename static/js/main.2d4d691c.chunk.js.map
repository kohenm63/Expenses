{"version":3,"sources":["Context/BillContext.js","Components/AddBill/AddBill.js","Components/BillList/BillList.js","Components/BillTotal/BillTotal.js","Components/BillOptions/BillOptions.js","Components/EditBills/EditBills.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["BillContext","createContext","BillProvider","children","useState","bills","setBills","selectedCostInterval","setSelectedCostInterval","editModeEnabled","setEditModeEnabled","useEffect","JSON","parse","localStorage","getItem","alphabeticalOrder","sort","a","b","title","toUpperCase","Provider","value","updateBills","bill","updatedBills","setItem","stringify","editBill","billToUpdate","billsFiltered","filter","deleteBill","billToDelete","AddBill","newBillTitle","setNewBillTitle","newBillCost","setNewBillCost","useContext","formValid","costValid","Number","parseFloat","split","find","char","className","type","placeholder","onChange","event","target","onClick","monthlyCost","enabled","BillList","map","index","key","checked","BillTotal","moneyIntervalTransform","cost","reduce","acc","val","toFixed","BillOptions","e","innerText","EditBills","billIndex","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qVAEMA,EAAcC,0BAEdC,EAAe,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAAc,EAERC,mBAAS,IAFD,mBAE1BC,EAF0B,KAEpBC,EAFoB,OAGsBF,mBAAS,WAH/B,mBAG1BG,EAH0B,KAGLC,EAHK,OAIaJ,oBAAS,GAJtB,mBAI1BK,EAJ0B,KAITC,EAJS,KAOjCC,qBAAU,WACNL,EAASM,KAAKC,MAAMC,aAAaC,QAAQ,WAAY,MACtD,CAACT,IAIJ,IASSU,EAAoB,SAACX,GAC1B,OAAOA,EAAMY,MAAK,SAACC,EAAEC,GAAH,OAChBD,EAAEE,MAAMC,cAAgBF,EAAEC,MAAMC,eAAiB,EAAI,MAmB3D,OACI,kBAACrB,EAAYsB,SAAb,CAAsBC,MAAS,CACnClB,QACEmB,YAjCkB,SAACC,GAClB,IAAMC,EAAcV,EAAkB,GAAD,mBAC9BX,GAD8B,CAEjCoB,KAEJX,aAAaa,QAAQ,QAASf,KAAKgB,UAAUF,IAC7CpB,EAASoB,IA4BVG,SApBkB,SAACC,GACd,IAAMC,EAAgB1B,EAAM2B,QAAO,SAACP,GAAD,OAASA,EAAKL,QAASU,EAAaV,SACjEM,EAAeV,EAAkB,GAAD,mBAClCe,GADkC,CAErCD,KAEDhB,aAAaa,QAAQ,QAASf,KAAKgB,UAAUF,IACjDpB,EAASoB,IAcVnB,uBACAC,0BACAE,qBACAD,kBACAwB,WAfoB,SAACC,GACnB,IAAMR,EAAerB,EAAM2B,QAAO,SAACP,GAAD,OAAUA,EAAKL,QAAUc,EAAad,SACxEN,aAAaa,QAAQ,QAASf,KAAKgB,UAAUF,IAC7CpB,EAASoB,MAcRvB,ICCMgC,G,MApDC,WAAO,IAAD,EACoB/B,mBAAS,IAD7B,mBACZgC,EADY,KACEC,EADF,OAEkBjC,mBAAS,IAF3B,mBAEZkC,EAFY,KAECC,EAFD,KAIff,EAAegB,qBAAWxC,GAA1BwB,YAIDiB,EAAY,WAClB,IAAMC,EAAYJ,GAAeK,OAAOC,WAAWN,GAGnD,OAFmBF,GAAgBA,EAAaS,MAAM,IAAIC,MAAK,SAAAC,GAAI,MAAW,KAAPA,MAElDL,GASpB,OACO,yBAAKM,UAAU,uBACX,2BAAOA,UAAU,sCAChBC,KAAK,OACLC,YAAY,cACZ3B,MAAOa,EACPe,SAAa,SAACC,GAAD,OAAWf,EAAgBe,EAAMC,OAAO9B,UAEnD,2BAAOyB,UAAU,qCACnBC,KAAK,SACLC,YAAY,eACZ3B,MAAOe,EACPa,SAAa,SAACC,GAAD,OAAWb,EAAea,EAAMC,OAAO9B,UAEpD,4BAAQyB,UAAU,6BAClBM,QAAU,WACJb,IACFjB,EAAY,CACRJ,MAAMgB,EACNmB,YAAYjB,EACZkB,SAAQ,IAxBzBjB,EAAe,IACfF,EAAgB,OAiBP,eCLEoB,G,MAjCE,WAAO,IAAD,EAE8BjB,qBAAWxC,GAAjDK,EAFQ,EAERA,MAAOwB,EAFC,EAEDA,SAASnB,EAFR,EAEQA,mBAG3B,OACI,yBAAKsC,UAAU,wBACf,wBAAIA,UAAU,gBAAgBM,QAAS,kBAAM5C,GAAmB,KAAhE,QAEGL,EAAMqD,KAAI,SAACjC,EAAMkC,GACb,OACC,yBAAKC,IAAKD,EAAOX,UAAU,iBAC3B,2BAAOC,KAAK,WACZD,UAAU,mBACVa,QAASpC,EAAK+B,QACdL,SAAU,kBAAMtB,EAAS,CACvBT,MAAOK,EAAKL,MACZmC,YAAa9B,EAAK8B,YAClBC,SAAU/B,EAAK+B,aAGjB,yBAAKR,UAAU,yBACdvB,EAAKL,MADN,MACgBK,EAAK8B,YADrB,iBCqCDO,G,MAvDG,WAAO,IAAD,EACoBtB,qBAAWxC,GAA3CK,EADY,EACZA,MAAOE,EADK,EACLA,qBAGTwD,EAAyB,SAACC,GAC5B,IAAMT,EAAcZ,OAAOC,WAAWoB,GACtC,OAAQzD,GACN,IAAK,UACH,OAAOgD,EAET,IAAK,SACH,OAAqB,GAAdA,EAET,IAAK,SACH,OAAqB,GAAdA,EAAmB,GAE5B,IAAK,QACH,OAAqB,GAAdA,EAAmB,IAE5B,QACE,OAAO,IAIf,OACI,oCACA,yBAAKP,UAAU,wBACZzC,EADH,cAEE,0BAAMyC,UAAU,cAEZ,SAAU3C,EAAM4D,QAAO,SAACC,EAAKC,GAC3B,OAAOA,EAAIX,QACXO,EAAuBI,EAAIZ,aAAeW,EAC1CA,IACC,GAAGE,QAAQ,KAIpB,yBAAKpB,UAAU,yBACZzC,EADH,UAEE,0BAAMyC,UAAU,eAEZ,SAAU3C,EAAM4D,QAAO,SAACC,EAAKC,GAC3B,OAAQA,EAAIX,QAEZU,EADAH,EAAuBI,EAAIZ,aAAeW,IAEzC,GAAGE,QAAQ,QC3BbC,G,MAtBK,WAAO,IAAD,EAEkC7B,qBAAWxC,GAA7DO,EAFgB,EAEhBA,qBAAsBC,EAFN,EAEMA,wBAE9B,OACE,yBAAKwC,UAAU,6BACb,yBAAKA,UAAoC,UAAzBzC,EAAmC,oBAAsB,WACvE+C,QAAS,SAACgB,GAAD,OAAO9D,EAAwB8D,EAAEjB,OAAOkB,aADnD,SAIA,yBAAKvB,UAAoC,YAAzBzC,EAAqC,oBAAsB,WACzE+C,QAAS,SAACgB,GAAD,OAAO9D,EAAwB8D,EAAEjB,OAAOkB,aADnD,WAIA,yBAAKvB,UAAoC,WAAzBzC,EAAoC,oBAAsB,WACxE+C,QAAS,SAACgB,GAAD,OAAO9D,EAAwB8D,EAAEjB,OAAOkB,aADnD,aCoBSC,G,MAlCG,WAAO,IAAD,EAEsChC,qBAAWxC,GAA/DK,EAFc,EAEdA,MAAOK,EAFO,EAEPA,mBAAoBmB,EAFb,EAEaA,SAAUI,EAFvB,EAEuBA,WAE7C,OACE,yBAAKe,UAAU,uBACb,wBAAIA,UAAU,qBAAqBM,QAAS,kBAAM5C,GAAmB,KAArE,QAIEL,EAAMqD,KAAI,SAACjC,EAAMgD,GACf,OACE,yBAAKb,IAAKa,EAAWzB,UAAU,iBAC7B,yBAAKA,UAAU,yBACb,yBAAKA,UAAU,mBAAmBvB,EAAKL,OACvC,2BAAO4B,UAAU,uBACfC,KAAK,SACL1B,MAAOE,EAAK8B,YACZJ,SAAU,SAACmB,GAAD,OAAOzC,EAAS,CACxBT,MAAOK,EAAKL,MACZoC,QAAS/B,EAAK+B,QACdD,YAAae,EAAEjB,OAAO9B,WAExB,wBAAI+B,QAAS,kBAAMrB,EAAWR,IAAOuB,UAAU,iBAA/C,WAEJ,oCCEC0B,EAtBH,WAAO,IAETjE,EAAoB+B,qBAAWxC,GAA/BS,gBAER,OACE,yBAAKuC,UAAU,mBAEXvC,EACC,kBAAC,EAAD,MAAgB,8BAEjB,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCVYkE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,KAAc,kBAAC,EAAD,OAAwBC,SAASC,eAAe,SD4HxE,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2d4d691c.chunk.js","sourcesContent":["import React ,{useState,useEffect, createContext}from 'react';\n\nconst BillContext = createContext();\n\nconst BillProvider = ({children}) => {\n\n    const [bills,setBills] = useState([]);\n    const [selectedCostInterval,setSelectedCostInterval] = useState('Monthly')\n    const [editModeEnabled, setEditModeEnabled] = useState(false);\n\n   \n    useEffect(() => {\n        setBills(JSON.parse(localStorage.getItem('bills'))|| [])\n    }, [setBills]) ;//-->setBills == componentDidMount --/\n\n    \n\n    const updateBills = (bill) =>{\n       const updatedBills =alphabeticalOrder([\n           ...bills,  //-->spread operator --/\n           bill\n       ]);\n       localStorage.setItem('bills', JSON.stringify(updatedBills));\n       setBills(updatedBills);\n      \n       };\n       const alphabeticalOrder = (bills) => {\n        return bills.sort((a,b) => \n          a.title.toUpperCase() < b.title.toUpperCase() ? -1 : 0);\n      };\n    \n       const editBill = (billToUpdate) => {\n           const billsFiltered = bills.filter((bill)=> bill.title!== billToUpdate.title);\n           const updatedBills = alphabeticalOrder([\n            ...billsFiltered,\n            billToUpdate\n          ]);\n           localStorage.setItem('bills', JSON.stringify(updatedBills));\n       setBills(updatedBills);\n\n       };\n       const deleteBill = (billToDelete) => {\n        const updatedBills = bills.filter((bill) => bill.title !== billToDelete.title);\n        localStorage.setItem('bills', JSON.stringify(updatedBills));\n        setBills(updatedBills);\n      };\n\n    return (\n        <BillContext.Provider value = {{\n    bills,\n      updateBills,\n      editBill,\n      selectedCostInterval,\n      setSelectedCostInterval,\n      setEditModeEnabled,\n      editModeEnabled,\n      deleteBill\n             }}>\n        {children}\n            \n        </BillContext.Provider>\n    );\n}\n\nexport{BillContext,BillProvider};\n","//rfc>>>\nimport React,{useContext,useState} from 'react';\nimport { BillContext } from '../../Context/BillContext';\nimport style from '../AddBill/style.css'\n\n\n\nconst AddBill = () => {\n    const[newBillTitle, setNewBillTitle]= useState('');\n    const[newBillCost, setNewBillCost]= useState('');  //-->  datata type doesnt matter --/\n\nconst {updateBills} = useContext(BillContext)\n\n//--> validation enf(snippet)>>> --/\n\nconst formValid = () => {\nconst costValid = newBillCost && Number.parseFloat(newBillCost); //-->parseFloat- Converts a string to a floating-point number. --/\nconst titleValid = newBillTitle && newBillTitle.split('').find(char => char!==''); //-->return an array where a  char is not an empty string--/\n\nreturn titleValid && costValid;\n}\n\n//--> clear the form after sumbittion --/\n const clearFormData = () => {\n    setNewBillCost('');\n    setNewBillTitle('');\n}\n\n return (\n        <div className=\"add-bill-container \">\n            <input className=\"add-bill-form-control form-control \"\n             type=\"text\" \n             placeholder=\"Enter Title\" \n             value={newBillTitle}\n             onChange =  {(event) => setNewBillTitle(event.target.value)}\n             ></input>\n               <input className=\"add-bill-form-control form-control\"\n             type=\"number\" \n             placeholder=\"Monthly Cost\" \n             value={newBillCost}\n             onChange =  {(event) => setNewBillCost(event.target.value)}\n             ></input>\n             <button className=\"add-bill-form-control btn \"\n             onClick ={() =>{\n                if(formValid) {\n                 updateBills({\n                     title:newBillTitle,\n                     monthlyCost:newBillCost,\n                     enabled:true\n                 })\n                 clearFormData();\n             }\n\n             } }>Add Bill</button>\n\n        </div>\n    );\n}\n\nexport default AddBill;\n","import React, { useContext } from 'react';\nimport style from '../BillList/style.css'\nimport { BillContext } from '../../Context/BillContext';\n\nconst BillList = () => {\n    \n        const {bills, editBill,setEditModeEnabled} = useContext(BillContext);\n    \n       \n    return (\n        <div className='bill-list-container '>\n        <h6 className='edit-mode-btn' onClick={() => setEditModeEnabled(true)}>Edit</h6>\n       {\n           bills.map((bill, index) => { \n               return(\n                <div key={index} className='bill-list-row'>\n                <input type='checkbox'\n                className='form-check-input'\n                checked={bill.enabled}\n                onChange={() => editBill({\n                  title: bill.title,\n                  monthlyCost: bill.monthlyCost,\n                  enabled: !bill.enabled\n                })}>\n              </input>\n                <div className='bill-list-row-content'>\n                {bill.title} - {bill.monthlyCost}₪\n\n                </div>\n                </div>\n               );\n           })\n       }\n        </div>\n    );\n}\n\nexport default BillList;\n","import React,{useContext,useState} from 'react';\nimport style from '../BillTotal/style.css'\nimport { BillContext } from '../../Context/BillContext';\n\n\n\n\nconst BillTotal = () => {\n    const { bills, selectedCostInterval } = useContext(BillContext);\n    \n\n    const moneyIntervalTransform = (cost) => {\n        const monthlyCost = Number.parseFloat(cost);\n        switch (selectedCostInterval) {\n          case 'Monthly':\n            return monthlyCost;\n    \n          case 'Yearly':\n            return monthlyCost * 12;\n    \n          case 'Weekly':\n            return monthlyCost * 12 / 52; //52 weeks in a yr\n    \n          case 'Daily':\n            return monthlyCost * 12 / 365;\n        \n          default:\n            return 0;\n        }\n    };\n\n    return (\n        <>\n        <div className='bill-total-container'>\n          {selectedCostInterval} bill cost:\n          <span className='total-cost'>          \n            {\n              '₪'+ \"\" + bills.reduce((acc, val) => {\n                return val.enabled ?\n                moneyIntervalTransform(val.monthlyCost) + acc :\n                acc;\n              }, 0).toFixed(2)\n            }\n          </span>\n        </div>\n        <div className='total-saved-container'>\n          {selectedCostInterval} saved:\n          <span className='total-saved'>\n            {\n              '₪'+ \"\" + bills.reduce((acc, val) => {\n                return !val.enabled ?\n                moneyIntervalTransform(val.monthlyCost) + acc:\n                acc;\n              }, 0).toFixed(2) //rounded value, 2 decimal points\n            }\n          </span>\n        </div>\n        \n      </>\n    );\n}\n\nexport default BillTotal;\n","import React, { useContext } from 'react';\nimport '../BillOptions/style.css';\nimport { BillContext } from '../../Context/BillContext';\n\nconst BillOptions = () => {\n\n  const { selectedCostInterval, setSelectedCostInterval } = useContext(BillContext);\n\n  return (\n    <div className='interval-option-container'>\n      <div className={selectedCostInterval === 'Daily' ? 'selected-interval' : 'interval'}\n        onClick={(e) => setSelectedCostInterval(e.target.innerText)}>\n        Daily\n      </div>\n      <div className={selectedCostInterval === 'Monthly' ? 'selected-interval' : 'interval'}\n        onClick={(e) => setSelectedCostInterval(e.target.innerText)}>\n        Monthly\n      </div>\n      <div className={selectedCostInterval === 'Yearly' ? 'selected-interval' : 'interval'}\n        onClick={(e) => setSelectedCostInterval(e.target.innerText)}>\n        Yearly\n      </div>\n    </div>\n  );\n};\n\nexport default BillOptions;","import React, { useContext } from 'react';\nimport './style.css';\nimport { BillContext } from '../../Context/BillContext';\n\nconst EditBills = () => {\n\n  const { bills, setEditModeEnabled, editBill, deleteBill } = useContext(BillContext);\n\n  return (\n    <div className='edit-bill-container'>\n      <h6 className='edit-mode-done-btn' onClick={() => setEditModeEnabled(false)}>\n        Done\n      </h6>\n      {\n        bills.map((bill, billIndex) => {\n          return(\n            <div key={billIndex} className='edit-bill-row'>\n              <div className='edit-bill-row-content'>\n                <div className='edit-bill-title'>{bill.title}</div>\n                <input className='edit-bill-cost-input'\n                  type='number'\n                  value={bill.monthlyCost}\n                  onChange={(e) => editBill({\n                    title: bill.title,\n                    enabled: bill.enabled,\n                    monthlyCost: e.target.value\n                  })}></input>\n                  <h6 onClick={() => deleteBill(bill)} className='delete-button'>DELETE</h6>\n              </div>\n              <hr></hr>\n            </div>\n          );\n        })\n      }\n    </div>\n  );\n};\n\nexport default EditBills; ","import React ,{useContext}from 'react';\nimport './App.css';\nimport AddBill from '../AddBill/AddBill';\nimport {BillContext} from '../../Context/BillContext';\nimport BillList from '../BillList/BillList';\nimport BillTotal from '../BillTotal/BillTotal';\nimport BillOptions from '../BillOptions/BillOptions';\nimport EditBills from '../EditBills/EditBills';\n\nconst App = () => {\n\n  const { editModeEnabled } = useContext(BillContext);\n\n  return (\n    <div className='bills-container'>\n      {\n        editModeEnabled ?\n         <EditBills /> : <span>\n        \n        <AddBill />\n        <BillOptions />\n        <BillList />\n        <BillTotal />\n       \n        \n        </span>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport { BillProvider } from './Context/BillContext';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<BillProvider><App /></BillProvider>, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}